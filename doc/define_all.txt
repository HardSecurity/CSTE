###vul define

##basic info
#vul's name
name:

#designer's name
designer:

#designer's email
email:

#simple introduce about the vul
intro:


##conf info
#support run_all: true, false
support_run_all:

#support check: true, false
support_check:


##vul info
#benchmark: basic, ext, study, research, unsorted
bench:

#bit: 32, 64
bit:

#attack model: data, program
attack_model:

#vul'type: stack_overflow, heap_overflow, BSS_overflow, double_free, use_afer_free, format_string, memory_leak, other, hybrid_vuls
vul_type:


##path
#vul's path
vul_path:

#compile's path
compile_path:

#check's path
check_path:


##attack info
#default attack input's name
default_attack_name:

#default normal input's name
default_normal_name:

#info of all normal input
normal_class {

#normal input name
name: 

#simple introduce about the normal input
intro:

#path of the normal input
path:

}

#info of all attack input
attack_class {

#attack input name
name:

#simple introduce about the attack input
intro:

#path of the attack input
path:

#attack type: code_injection, r2libc, rop, jop, fop, other_code_reuse(other code reuse attacks, except r2libc/rop/jop/fop), dop, other_non_control_data(other non-control-data attacks, except dop), other(other attacks), hybrid_attacks
type:

#attack goal: open_shell, close_shell, read_file, write_file, system_call, close_dep
goal:

#security can be bypassed by the attack input
#dep status: true, false
dep:

#aslr status: true, false
aslr:

#stack cookie status: true, false
stack_cookie:

}


